#%%
import numpy as np
from matplotlib import pyplot as plt
from scipy.stats import expon
from matplotlib import cm 

def plot_distribution(pts, scales, how="both", num_obs=10**6):
    """Helper function to display the effect of the exponential distribution on a given process time."""
    # new fig 
    fig, ax = plt.subplots(1, 1)
    # get x 
    x = np.linspace(
        start = 0, # expon.ppf(0.000001), 
        stop = 15, #expon.ppf(0.999999), 
        num = 100)
    # helper list for line styles
    lstyles = ["--", "-.", ":", "-"][:len(pts)]
    # iter process time and scales 
    for pt, sc, ls in zip(pts, scales, lstyles):
        # distribution as line plot 
        if how=="distr" or how =="both":
            # exponentially modified Gaussian distribution
            distr = expon(scale=pt*sc, loc=pt)
            # plot percent point function 
            ax.plot(
                x, 
                distr.pdf(x), 
                lw=2, 
                label=f'Exponential distribution (pt={pt})', 
                linestyle=ls, 
                alpha=0.85)
        # distribution as histogram 
        if how=="hist"or how=="both":
            # random variates of given type
            r = expon.rvs(size=num_obs, scale=pt*sc, loc=pt)
            ax.hist(r, 
                density=True, 
                bins="auto", 
                histtype='stepfilled', 
                alpha=0.2)

    # format axis
    ax.set_xlim(0, x[-1])
    ax.set_ylim([0, 1])
    ax.set_xlabel("Process time")
    ax.set_ylabel("Probability density")

    # style 
    ax.legend(loc='best', frameon=True)
    ax.grid(color="silver")
    ax.set_title("Effect of exponential distribution on process times")

    # save and show
    fig.savefig(f"distribution{pts}_{scales}.png", dpi=600)
    plt.show()


plot_distribution([2, 2.25], [1,1], how="distr")
plot_distribution([2, 2, 2], [0.75, 1, 1.25], how="distr")

# %%
#%%
import numpy as np
from matplotlib import pyplot as plt
from scipy.stats import expon
from matplotlib import cm 

plt.rcParams["font.family"] = "Times New Roman"

def plot_distribution_comp(pts, scales, how="both", num_obs=10**6):
    """Helper function to display the effect of the exponential distribution on a given process time."""
    # new fig 
    fig, axes = plt.subplots(1, 2)
    # get x 
    x = np.linspace(
        start = 0, # expon.ppf(0.000001), 
        stop = 15, #expon.ppf(0.999999), 
        num = 100)
    # helper list for line styles
    lstyles = ["--", "-.", ":", "-"]
    dvari = {0.75 : "low", 1 : "neutral", 1.25: "high"}
    # iter process time and scales 
    for i, ax in enumerate(axes): 
        for pt, sc, ls in zip(pts[i], scales[i], lstyles):
            # distribution as line plot 
            if how=="distr" or how =="both":
                # exponentially modified Gaussian distribution
                distr = expon(scale=pt*sc, loc=pt*sc)
                # plot percent point function 
                ax.plot(
                    x, 
                    distr.pdf(x), 
                    lw=2, 
                    label=f'pt={pt}, var={dvari[sc]}', 
                    linestyle=ls, 
                    alpha=0.85)
            # distribution as histogram 
            if how=="hist"or how=="both":
                # random variates of given type
                r = expon.rvs(size=num_obs, scale=pt*sc, loc=pt*sc)
                ax.hist(r, 
                    density=True, 
                    bins="auto", 
                    histtype='stepfilled', 
                    alpha=0.2)

            # format axis
            ax.set_xlim(0, x[-1])
            ax.set_ylim([0, 0.65])
            ax.set_xlabel("Process time")
            ax.set_ylabel("Probability density")

        # style 
        ax.legend(loc='best', frameon=True)
        ax.grid(color="silver")

    fig.suptitle("Effect of the exponential distribution and the added variability on the process times", y=0.9)
    fig.set_size_inches(8, 3)
    fig.tight_layout()

    # save and show
    fig.savefig(f"distribution{pts}_{scales}.png", dpi=1600)


plot_distribution_comp(
    pts=[[2, 2.25], [2, 2, 2]],
    scales=[[1, 1], [0.75, 1, 1.25]], 
    how="distr")
